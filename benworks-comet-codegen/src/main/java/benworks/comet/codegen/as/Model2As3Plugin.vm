#set( $class = $metadata )

// ${dontedit}
// Generated By Gecko,if you need to edit it,extends it! 

 package ${plugin.getPackage($class)}
{

#foreach( $beanProperty in $class.getBeanProperties() )
#set( $importname = ${plugin.getFullyQualifiedPropertyType($beanProperty)} )
#if ($importname.indexOf(".")>= 0&&$importname!="java.lang.Object")
#if (!${plugin.isSamePackage($class,$beanProperty.type.javaClass)})
  import ${plugin.getFullyQualifiedPropertyType($beanProperty)};
#end
#end
#end
  import flash.utils.ByteArray;
  import flash.net.registerClassAlias;
  import com.xlands.ihome3.base.*;
#if ($class.comment)
  /** ${class.comment} */
#end
  public class ${class.name} ${plugin.getExtends($class)}
  {
#foreach( $field in $class.getFields() )
#if ($field.static && $field.public && $field.final)
#if ($field.comment)
    /** ${field.comment} */
#end
    public static const ${field.name}:${plugin.toActionScriptType($field.type)} = ${field.initializationExpression};

#end
#end
#foreach( $nestClass in $class.getNestedClasses() )
#set($index = 0)
#foreach( $field in $nestClass.getFields() )
#if ($field.comment)
    // ${field.comment}
#end
    public static const ${nestClass.name}_${field.name}:int = $index;
#set($index = $index + 1)
    
#end
#end
#foreach( $enumClass in $plugin.getIncludeEnums($class) )
#set($index = 0)
#foreach( $field in $enumClass.getFields() )
#if ($field.comment)
    // ${field.comment}
#end
    public static const ${enumClass.name}_${field.name}:int = $index;
#set($index = $index + 1)
    
#end
#end
    public function ${class.name}(){
    	super();
        registerClass();
    }

#foreach( $beanProperty in $class.getBeanProperties() )
#if (${plugin.isSuitableProperty($beanProperty)})
#if ($beanProperty.accessor.comment)
    /** ${beanProperty.accessor.comment} */
#end
	#set($propertyType=${plugin.getPropertyType($beanProperty)})
	#set($propertyName=${plugin.capitalize($beanProperty.name)})
    public var ${beanProperty.name}:$propertyType;
    
#end
#end

    ${plugin.getOverride($class)}public function registerClass():void{
    	registerClassAlias("${class.name}", ${class.name});
    }
    
    ${plugin.getOverride($class)}public function clone():Object {
    	registerClass();
    	var copier: ByteArray = new ByteArray();
    	copier.writeObject(this);
    	copier.position = 0;
    	return copier.readObject() as ${class.name};
    }
  }

}
